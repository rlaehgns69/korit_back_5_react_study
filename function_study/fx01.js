// 클라이언트 -> 서버 요청 -> 서버의 응답 -> 클라이언트

클라이언트_화면_출력(); //함수 호출

function 클라이언트_화면_출력() { //함수 정의
  let a = 클라이언트_데이터_입력(10); // 리턴값 대입
  let b = 클라이언트_데이터_입력(20);

  let 요청데이터 = {
    데이터1: a,
    데이터2: b
  };
  // 김준일, 이동윤
  // 코리아it = {김준일, 이동윤}

  // 함수안에서 함수 정의 가능(자바스크립트) - 짜지말자.(함수안에서는 함수를)
  // const test = function test() {
  //     return 요청데이터;
  // }
  // 익명함수 
  const test = () => {
    let c = 30;
    return 요청데이터;
  }
  // test가 함수안에 있기 때문에 같은 함수안에 있는 요청데이터값 사용 가능
  // 함수안에 함수 정의 같은 메모리 공간 값사용 가능 장점
  // 지역변수

  클라이언트_데이터_삽입_요청_버튼_클릭(test());
}

// Input
function 클라이언트_데이터_입력(데이터) {
  return 데이터; // 함수자체가 값 리턴

  // 1. 비어있는 리턴 (함수 자료형은 void)
  // return; 함수를 빠져나가라. 실행하지마
  // 리턴자료형이 없다고 해서 자료형이 없는 게 아니다.(void) 
  // 자바스크립트 값이 정의되는 순간 값이 지정(js특징)
  // return number->function number타입 값이 지정되지 않았을 때는 undefined
  // console.log(데이터);
}
// 만들어라. -> 정의 정의된걸 만들어라. 무엇을 매개변수
// console.log(클라이언트_데이터_입력()); 반환값 x 리턴타입 undefined

// function 클라이언트_데이터_입력(데이터: any): any 
// 타입스크립트 구조(자바)
// 자바스크립트 대입이되면 / 타입스크립트 타입결정 대입전에

// function 클라이언트_데이터_입력(데이터) {
//   let a = 10;
//   let b = 20;
//   let result = a + b;

//   console.log(10);
//   console.log(20);
// }

function 클라이언트_데이터_삽입_요청_버튼_클릭(요청데이터) {
  백엔드_데이터_삽입_요청(요청데이터);
}

function 백엔드_데이터_삽입_요청(요청데이터) {
  console.log(요청데이터); // let 요청데이터 =
  console.log("요청");
}